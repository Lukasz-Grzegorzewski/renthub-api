name: Backend

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      MAIL_HOST: ${{ secrets.MAIL_HOST }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_USER: ${{ secrets.MAIL_USER }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      DB_HOST: 'postgres'
      DB_PORT: 5432
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pgpassword
          POSTGRES_DB: renthub
        options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Wait for PostgreSQL to be up
        run: |
          for i in {1..10}; do
            if docker inspect --format='{{json .State.Health.Status}}' $(docker ps -q --filter "ancestor=postgres") | grep -q '"healthy"'; then
              echo "PostgreSQL is healthy!";
              break;
            else
              echo "Waiting for PostgreSQL to be healthy...";
              sleep 5;
            fi;
          done

      - name: Verify PostgreSQL Configuration Inside Container
        run: |
          docker exec -it $(docker ps -q --filter "ancestor=postgres") bash -c "
          echo 'PostgreSQL Environment Variables:';
          printenv | grep POSTGRES;
          echo 'Connecting to PostgreSQL...';
          PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USER -d $POSTGRES_DB -c '\l';
          "

      - name: Check PostgreSQL logs
        run: docker logs $(docker ps -q --filter "ancestor=postgres")

      - name: Verify PostgreSQL Configuration Inside Container
        run: |
          docker exec $(docker ps -q --filter "ancestor=postgres") sh -c '
          echo "PostgreSQL Environment Variables:";
          printenv | grep POSTGRES;
          echo "Connecting to PostgreSQL...";
          PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USER -d $POSTGRES_DB -c "\l";
          '

      - name: Run tests
        run: npm i && npm run test